{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hank's Docs home page These are my notes for stuff I want to share. Technically not a blog, I suppose.","title":"Hank's Docs home page"},{"location":"#hanks-docs-home-page","text":"These are my notes for stuff I want to share. Technically not a blog, I suppose.","title":"Hank's Docs home page"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/","text":"Using ESP8266-RTOS-SDK on Debian Motivation ESP8266-RTOS-SDK is not well supported on PlatformIO. https://community.platformio.org/t/vs-code-esp8266-non-rtos-nonos-sdk-project-creation/27091 (PlatformIO provides a very low friction path tp programming a variety of microcontrollers.) Espressif themselves deprecate ESP8266-NONOS-SDK and recommend ESP8266-RTOS-SDK https://github.com/espressif/ESP8266_NONOS_SDK#support-policy-for-esp8266-nonos It seems if one wishes to use Espressif's SDK and tools directly, it should be via the instructions found at https://github.com/espressif/ESP8266_RTOS_SDK#esp8266-rtos-software-development-kit . I found these instructions a bit challenging so I thought it would be useful to work my way through them (blunder my way through) and document what I needed to do to get this working. Overview Install required OS packages and some config. Clone the Espressif Github repo. Run the repo provided install.sh script to install the tools. Build a trial project. Note: The instructions on the web page list downloading build tools and then provide no hint as to where to install them. The install.sh script will do that so there is no need for the user to download build tools separately. Environment This install was performed on a new install of Debian Bullseye, including the Gnome and KDE desktops as well as the SSH server using a non-free netinst image. Commands that require root are preceeded with sudo rather than using # or $ to indicate whether they are user or root commands to make it poossible to copy the entire line and paste it into a terminal window. The SDK requires the following environment variable to get off the ground. export IDF_PATH=~/esp/ESP8266_RTOS_SDK The SDK requires that python run Python 3. On Debian Bullseye this can be accomplished using update-alternatives . (Debian Bullseye does not have an unversioned python program by default.) sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1 python --version sudo apt install wget python3-virtualenv python3-pip \\ libncurses-dev flex bison gperf minicom git I configure git with the following commands. (Substitute your preferred characteristics.) git config --global user.name \"<Yourt Name>\" git config --global user.email <your email> git config --global pull.ff only You will need read/write access to the USB device. This can be done by adding the user to the dialout group. sudo usermod -a -G dialout $USER su - $USER (The second command adds the group to the users environment without having to logout.) Cloning ESP8266-RTOS-SDK Espressif's instructions indicate to clone into ~/esp/ mkdir esp cd esp git clone https://github.com/espressif/ESP8266_RTOS_SDK.git This will create ~/esp/ESP8266_RTOS_SDK/ . Install the tool chain export IDF_PATH=~/esp/ESP8266_RTOS_SDK cd ~/esp/ESP8266_RTOS_SDK/ ./install.sh If all goes well, you will see . . . All done! You can now run: . ./export.sh This will have installed the tool chain in ~/.espressif . Sourcing export.sh will report hbarta@yggdrasil:~/esp/ESP8266_RTOS_SDK$ . ./export.sh Adding ESP-IDF tools to PATH... Checking if Python packages are up to date... Python requirements from /home/hbarta/esp/ESP8266_RTOS_SDK/requirements.txt are satisfied. Added the following directories to PATH: /home/hbarta/esp/ESP8266_RTOS_SDK/components/esptool_py/esptool /home/hbarta/esp/ESP8266_RTOS_SDK/components/partition_table/ /home/hbarta/.espressif/tools/xtensa-lx106-elf/esp-2020r3-49-gd5524c1-8.4.0/xtensa-lx106-elf/bin /home/hbarta/.espressif/python_env/rtos3.4_py3.9_env/bin /home/hbarta/esp/ESP8266_RTOS_SDK/tools Done! You can now compile ESP8266-RTOS-SDK projects. Go to the project directory and run: make hbarta@yggdrasil:~/esp/ESP8266_RTOS_SDK$ The hello_world project can then be built cd ./examples/get-started/hello_world make make flash I was unable to get minicom to read the output from /dev/ttyUSB0 at the default baud rate of 74880 and also tried 9600, 19200 and 115200. Contributing Contributions welcome but not limited to Wrong or confusing wording. Additional Linux distros and/or operating systems. Instructions for integrating this with VS Code or other popular IDEs but without PlatformIO. (Or with PlatformIO if that can be managed.) The repo for this page is at https://github.com/HankB/MkDocs-blog/blob/main/tech/ESP8266-RTOS-SDK_on_Debian.md","title":"Using ESP8266-RTOS-SDK on Debian"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#using-esp8266-rtos-sdk-on-debian","text":"","title":"Using ESP8266-RTOS-SDK on Debian"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#motivation","text":"ESP8266-RTOS-SDK is not well supported on PlatformIO. https://community.platformio.org/t/vs-code-esp8266-non-rtos-nonos-sdk-project-creation/27091 (PlatformIO provides a very low friction path tp programming a variety of microcontrollers.) Espressif themselves deprecate ESP8266-NONOS-SDK and recommend ESP8266-RTOS-SDK https://github.com/espressif/ESP8266_NONOS_SDK#support-policy-for-esp8266-nonos It seems if one wishes to use Espressif's SDK and tools directly, it should be via the instructions found at https://github.com/espressif/ESP8266_RTOS_SDK#esp8266-rtos-software-development-kit . I found these instructions a bit challenging so I thought it would be useful to work my way through them (blunder my way through) and document what I needed to do to get this working.","title":"Motivation"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#overview","text":"Install required OS packages and some config. Clone the Espressif Github repo. Run the repo provided install.sh script to install the tools. Build a trial project. Note: The instructions on the web page list downloading build tools and then provide no hint as to where to install them. The install.sh script will do that so there is no need for the user to download build tools separately.","title":"Overview"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#environment","text":"This install was performed on a new install of Debian Bullseye, including the Gnome and KDE desktops as well as the SSH server using a non-free netinst image. Commands that require root are preceeded with sudo rather than using # or $ to indicate whether they are user or root commands to make it poossible to copy the entire line and paste it into a terminal window. The SDK requires the following environment variable to get off the ground. export IDF_PATH=~/esp/ESP8266_RTOS_SDK The SDK requires that python run Python 3. On Debian Bullseye this can be accomplished using update-alternatives . (Debian Bullseye does not have an unversioned python program by default.) sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.9 1 python --version sudo apt install wget python3-virtualenv python3-pip \\ libncurses-dev flex bison gperf minicom git I configure git with the following commands. (Substitute your preferred characteristics.) git config --global user.name \"<Yourt Name>\" git config --global user.email <your email> git config --global pull.ff only You will need read/write access to the USB device. This can be done by adding the user to the dialout group. sudo usermod -a -G dialout $USER su - $USER (The second command adds the group to the users environment without having to logout.)","title":"Environment"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#cloning-esp8266-rtos-sdk","text":"Espressif's instructions indicate to clone into ~/esp/ mkdir esp cd esp git clone https://github.com/espressif/ESP8266_RTOS_SDK.git This will create ~/esp/ESP8266_RTOS_SDK/ .","title":"Cloning ESP8266-RTOS-SDK"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#install-the-tool-chain","text":"export IDF_PATH=~/esp/ESP8266_RTOS_SDK cd ~/esp/ESP8266_RTOS_SDK/ ./install.sh If all goes well, you will see . . . All done! You can now run: . ./export.sh This will have installed the tool chain in ~/.espressif . Sourcing export.sh will report hbarta@yggdrasil:~/esp/ESP8266_RTOS_SDK$ . ./export.sh Adding ESP-IDF tools to PATH... Checking if Python packages are up to date... Python requirements from /home/hbarta/esp/ESP8266_RTOS_SDK/requirements.txt are satisfied. Added the following directories to PATH: /home/hbarta/esp/ESP8266_RTOS_SDK/components/esptool_py/esptool /home/hbarta/esp/ESP8266_RTOS_SDK/components/partition_table/ /home/hbarta/.espressif/tools/xtensa-lx106-elf/esp-2020r3-49-gd5524c1-8.4.0/xtensa-lx106-elf/bin /home/hbarta/.espressif/python_env/rtos3.4_py3.9_env/bin /home/hbarta/esp/ESP8266_RTOS_SDK/tools Done! You can now compile ESP8266-RTOS-SDK projects. Go to the project directory and run: make hbarta@yggdrasil:~/esp/ESP8266_RTOS_SDK$ The hello_world project can then be built cd ./examples/get-started/hello_world make make flash I was unable to get minicom to read the output from /dev/ttyUSB0 at the default baud rate of 74880 and also tried 9600, 19200 and 115200.","title":"Install the tool chain"},{"location":"tech/ESP8266-RTOS-SDK_on_Debian/#contributing","text":"Contributions welcome but not limited to Wrong or confusing wording. Additional Linux distros and/or operating systems. Instructions for integrating this with VS Code or other popular IDEs but without PlatformIO. (Or with PlatformIO if that can be managed.) The repo for this page is at https://github.com/HankB/MkDocs-blog/blob/main/tech/ESP8266-RTOS-SDK_on_Debian.md","title":"Contributing"},{"location":"tech/Raspberry-Pi/","text":"Raspberry Pi Pi 4B Almost good enough to be a daily driver. Even overclocked, it can't play Youtube videos full screen smoothly. The main thing that hampers it IMO us the USB attachment to an SSD. I won't run one of these off an SD card as that's just not fast enough. My dream system for the Pi 4 is a compute module with a carrier that supports 4 SATA ports and has enough MMC to boot/root on. I've been preferentially running Debian on the one I use as a desktop. Raspberry Pi OS (R-Pi OS) is good enough for servers but I find the desktop too constraining. And I can't install my preferred desktop - Gnome - due to missing dependencies. I can install KDE and that's a whole 'nother discussion. I bounce back and forth between Bullseye (stable) and Bookworm (testing.) When I get bored of no drama on Bullseye I swap in an SSD that has Bookworm. I've submitted two bug reports so far, one of which was just closed this morning (2022-04-04.) Here are some tips for running Debian on a Pi 4B. The system will suspend just fine but I can't figure out how to unsuspend. The first thing I do on a new install is go into gnome settings and disable suspend. Then I tell Systemd and gnome not to suspend using the following commands. (Seems not to want to suspend with no DE installed.) sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing' gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing' If you install Bookworm, hold the raspi-firmware package until the fixed firmware is in the Testing repo. ( apt-mark hold raspi-firmware ) Or install from experimental. Or install from the tagged version 1.20220331 . The default setting for Ethernet is \"unmanaged.\" It can be controlled using ifdown eth0 / ifup eth0 (but will be on again following the next reboot.) To let NetworkManager control, edit /etc/NetworkManager/NetworkManager.conf and change managed=true to managed=false . I'm not sure this is a complete fix for this issue as Ethernet will be back on the next boot regardless of the setting. Status of Bookworm seems pretty shaky right now. I get frequent loss of connection to the SSD and the only recovery is to pull power. Loss of connection to the SSD can lead to file corruption and may be the reason that my Bookworm installations seem to deteriorate with time. Using an SSD. You will really want a powered USB hub for this. SSDs that worked fine with a Pi 3B may not work well with a 4B because USB 3 supports the faster UAS driver and in turn that causes the SSD to require more power. You can disable UAS using usb-storage.quirks but I prefer the faster faster speed that UAS provides. I use the Wavlink Model: WL-UH3042P1 and power the Pi off the quick charge port. It's rated for 2.4A so I plug other accessories (mouse, keyboard) into the hub along with the SSD to reduce the power demands from the Pi. Overclocking is relatively straight forward. On my Nullseye install I have added the following to /boot/firmware/config.txt arm_freq=2000 over_voltage=6 gpu_freq=750 And have stress tested using a variety of stressers. The CPU temperature goes up to about 82\u00b0C max. I would be concerned if I was running that kind of load at all times, but I'm not. * CPU case. I like the FLIRC cases a lot. Big hunk of aluminum with a molded in protrusion that contacts the CPU through a small pad and does a great job of drawing heat from the processor. It's compoletely passive so it won't stop working if a fan fails because there is no fan needed. Pi Zero, W, 2W and others Overlay FS and unattended-upgrades - No! I use some of these essentially as embedded systems so it seemed natural to employ the Overlay File System (R/O FS, Overlay FS) to reduce SD card failure. I run some of these on really cheap SD cards. I also prefer to keep unattended-upgrades installed to stay current with security upgrades. Unfortunately the two don't mix very well. The Overlay FS \"overlays\" the R/O FS with RAM so when apt-get update runs, it fills RAM with disk changes and results in \"no space on /\". On hosts that I have enabled Overlay RS, I have had to uninstall unattended-upgrades . I should look into PXE boot to see if systems that run from that can stay up to date and of course, not burn up SD cards. Unfortunately WiFi boot is problematic due to the need to establish an association before anything else can happen.","title":"Raspberry Pi"},{"location":"tech/Raspberry-Pi/#raspberry-pi","text":"","title":"Raspberry Pi"},{"location":"tech/Raspberry-Pi/#pi-4b","text":"Almost good enough to be a daily driver. Even overclocked, it can't play Youtube videos full screen smoothly. The main thing that hampers it IMO us the USB attachment to an SSD. I won't run one of these off an SD card as that's just not fast enough. My dream system for the Pi 4 is a compute module with a carrier that supports 4 SATA ports and has enough MMC to boot/root on. I've been preferentially running Debian on the one I use as a desktop. Raspberry Pi OS (R-Pi OS) is good enough for servers but I find the desktop too constraining. And I can't install my preferred desktop - Gnome - due to missing dependencies. I can install KDE and that's a whole 'nother discussion. I bounce back and forth between Bullseye (stable) and Bookworm (testing.) When I get bored of no drama on Bullseye I swap in an SSD that has Bookworm. I've submitted two bug reports so far, one of which was just closed this morning (2022-04-04.) Here are some tips for running Debian on a Pi 4B. The system will suspend just fine but I can't figure out how to unsuspend. The first thing I do on a new install is go into gnome settings and disable suspend. Then I tell Systemd and gnome not to suspend using the following commands. (Seems not to want to suspend with no DE installed.) sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-battery-type 'nothing' gsettings set org.gnome.settings-daemon.plugins.power sleep-inactive-ac-type 'nothing' If you install Bookworm, hold the raspi-firmware package until the fixed firmware is in the Testing repo. ( apt-mark hold raspi-firmware ) Or install from experimental. Or install from the tagged version 1.20220331 . The default setting for Ethernet is \"unmanaged.\" It can be controlled using ifdown eth0 / ifup eth0 (but will be on again following the next reboot.) To let NetworkManager control, edit /etc/NetworkManager/NetworkManager.conf and change managed=true to managed=false . I'm not sure this is a complete fix for this issue as Ethernet will be back on the next boot regardless of the setting. Status of Bookworm seems pretty shaky right now. I get frequent loss of connection to the SSD and the only recovery is to pull power. Loss of connection to the SSD can lead to file corruption and may be the reason that my Bookworm installations seem to deteriorate with time. Using an SSD. You will really want a powered USB hub for this. SSDs that worked fine with a Pi 3B may not work well with a 4B because USB 3 supports the faster UAS driver and in turn that causes the SSD to require more power. You can disable UAS using usb-storage.quirks but I prefer the faster faster speed that UAS provides. I use the Wavlink Model: WL-UH3042P1 and power the Pi off the quick charge port. It's rated for 2.4A so I plug other accessories (mouse, keyboard) into the hub along with the SSD to reduce the power demands from the Pi. Overclocking is relatively straight forward. On my Nullseye install I have added the following to /boot/firmware/config.txt arm_freq=2000 over_voltage=6 gpu_freq=750 And have stress tested using a variety of stressers. The CPU temperature goes up to about 82\u00b0C max. I would be concerned if I was running that kind of load at all times, but I'm not. * CPU case. I like the FLIRC cases a lot. Big hunk of aluminum with a molded in protrusion that contacts the CPU through a small pad and does a great job of drawing heat from the processor. It's compoletely passive so it won't stop working if a fan fails because there is no fan needed.","title":"Pi 4B"},{"location":"tech/Raspberry-Pi/#pi-zero-w-2w-and-others","text":"Overlay FS and unattended-upgrades - No! I use some of these essentially as embedded systems so it seemed natural to employ the Overlay File System (R/O FS, Overlay FS) to reduce SD card failure. I run some of these on really cheap SD cards. I also prefer to keep unattended-upgrades installed to stay current with security upgrades. Unfortunately the two don't mix very well. The Overlay FS \"overlays\" the R/O FS with RAM so when apt-get update runs, it fills RAM with disk changes and results in \"no space on /\". On hosts that I have enabled Overlay RS, I have had to uninstall unattended-upgrades . I should look into PXE boot to see if systems that run from that can stay up to date and of course, not burn up SD cards. Unfortunately WiFi boot is problematic due to the need to establish an association before anything else can happen.","title":"Pi Zero, W, 2W and others"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/","text":"Testing networking (WiFi, ETH) Pi 4B Testing the network interfaces on a Pi 4B running Debian Bookworm with available kernel packages. Following installation the `raspi-firmware1 package was held due to performance probnlems with the upgrade. All testing was performed with the firmware that came with the install media. Initial tests were hampered by two issues. I had mistyped the WiFi password causing connection attempts to fail. Ethernet was unmanaged and remained configured even when physically disconnected. This masked WiFi even though WiFi appeared to be associated (wlan0 had an IP address handed out by the local DHCP server.) I got the Ethernet under NetworkManager control and retyped the password and achieved some success with WiFi. Ethernet seemed to work without difficulty with all kernels. Status I'm not happy with results, will retest when I have a chance (not till the weekend.) 5.15.0-2-arm64 This is the kernel that comes with the install media ( 20220121_raspi_4_bookworm.img.xz ). Linux up 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux No WiFi. dmesg capture at https://paste.debian.net/1236231/ No wlan0 in ip addr output. Ethernet seems to work OK. 5.16.0-5-arm64 This is the kernel available in the repo to upgrade following installation. Linux up 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux WiFi works w/out difficulty on both 5G and 2.4G APs. Switching repeatedly between the two SSIDs takes less than ten seconds. 5.17.0-rc8-arm64 Available from experimental Linux up 5.17.0-rc8-arm64 #1 SMP Debian 5.17~rc8-1~exp1 (2022-03-14) aarch64 GNU/Linux WiFi works on 5G, does not associate on 2.4G. Captured output to daemon.log when trying to switch from an associated 5G AP to a 2.4G AP up until NM re-requested the WiFi password. https://paste.debian.net/1236229/ Connect times to the 5G AP was quick at times and not quick other times. At one point it was necessary to turn WiFi off and on again to get it to associate. (Both 5G and 2.4G radios are on the same WiFi AP.) Did not shutdown cleanly. Had to pull power. 5.17.0-trunk-arm64 From experimental Linux up 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux Tested a second time and system hung. Hadn't remoted in - working from desktop. Happened once before and was unable to restart GDM and shutdown hung too. Was able to examine logs and dmesg output and saw nothing unusual but may not have been looking in the right place. Had to remove power both times. Both 5G and 2.4G WiFi seem to be working well. Switching back and forth between them seems timely. 2022-04-03 repeating testing Setup: Recent install of bookworm install media. xzcat 20220121_raspi_4_bookworm.img.xz> /dev/sdf Install raspi-firmware from unstable (direct download) and network-manager and full upgrade of all bookworm packages. apt upgrade -y wget http://ftp.us.debian.org/debian/pool/non-free/r/raspi-firmware/raspi-firmware_1.20220328+ds-1_arm64.deb apt install ./raspi-firmware_1.20220328+ds-1_arm64.deb apt install network-manager Instructions for testing/managing WiFi using CLI HankB_, yes, from the command line, first, turn the wifi device on \"nmcli radio wifi on\" then list the wifi connections \"nmcli dev wifi list\", then sudo nmcli dev wifi connect network-ssid password \"network-password\" Test with 5.17.0-trunk-arm64 (ssh in via Ethernet) root@charm:~# nmcli radio wifi on root@charm:~# nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 97 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 97 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 77 *** WPA2 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 77 *** WPA2 root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" password \"elided\" Device 'wlan0' successfully activated with 'elided'. root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 5209sec preferred_lft 5209sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86390sec preferred_lft 14390sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 7194sec preferred_lft 7194sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 7197sec preferred_lft 4497sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86397sec preferred_lft 14397sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# root@charm:~# root@charm:~# root@charm:~# ifdown eth0 Killed old client process Internet Systems Consortium DHCP Client 4.4.2-P1 Copyright 2004-2021 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/eth0/dc:a6:32:bf:65:b5 Sending on LPF/eth0/dc:a6:32:bf:65:b5 Sending on Socket/fallback DHCPRELEASE of 192.168.1.103 on eth0 to 192.168.1.1 port 67 (This session was over Ethernet and resulted in a hung session following ifdown eth0 but I felt that was the easiest way to confirm that traffic was actually going over WiFi.) Reconnnect Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux Kernels available root@charm:~# ls -l /boot/vmlinuz* -rw-r--r-- 1 root root 28614528 Dec 18 23:20 /boot/vmlinuz-5.15.0-2-arm64 -rw-r--r-- 1 root root 29998976 Mar 15 06:54 /boot/vmlinuz-5.16.0-5-arm64 -rw-r--r-- 1 root root 30003072 Mar 29 07:16 /boot/vmlinuz-5.17.0-trunk-arm64 root@charm:~# Test with 5.15.0-2-arm64 (ssh in via Ethernet) root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7136sec preferred_lft 7136sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86394sec preferred_lft 14394sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever root@charm:~# nmcli radio wifi on root@charm:~# nmcli dev wifi list root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" password \"elided\" Error: No Wi-Fi device found. root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7098sec preferred_lft 7098sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86397sec preferred_lft 14397sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever root@charm:~# dmesg paste at https://paste.debian.net/1236660/ test with 5.16.0-5-arm64 starting with SSH over Ethernet root@charm:~# uname -a Linux charm 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7155sec preferred_lft 7155sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86389sec preferred_lft 14389sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 5692sec preferred_lft 5692sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 5696sec preferred_lft 2996sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86390sec preferred_lft 14390sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# ifdown eth0 Killed old client process Internet Systems Consortium DHCP Client 4.4.2-P1 Copyright 2004-2021 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/eth0/dc:a6:32:bf:65:b5 Sending on LPF/eth0/dc:a6:32:bf:65:b5 Sending on Socket/fallback DHCPRELEASE of 192.168.1.103 on eth0 to 192.168.1.1 port 67 Start second session over WiFi hbarta@charm:~$ ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 5595sec preferred_lft 5595sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 5599sec preferred_lft 2899sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86399sec preferred_lft 14399sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever hbarta@charm:~$ Confirmation that WiFi is working on both 5G (\"Fanghorn Forest\") and 2.4G (Giant Voice System) via WiFi ssh session. hbarta@charm:~$ nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 100 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 84 **** WPA2 * 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 80 *** WPA2 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 75 *** WPA2 hbarta@charm:~$ su - root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" Device 'wlan0' successfully activated with '369ee301-096a-420b-99a9-68def48160f9'. root@charm:~# nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 94 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 79 *** WPA2 * 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 66 *** WPA2 root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 6825sec preferred_lft 6825sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 6827sec preferred_lft 4127sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86401sec preferred_lft 14401sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# uname -a Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux root@charm:~#","title":"Testing networking (WiFi, ETH) Pi 4B"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#testing-networking-wifi-eth-pi-4b","text":"Testing the network interfaces on a Pi 4B running Debian Bookworm with available kernel packages. Following installation the `raspi-firmware1 package was held due to performance probnlems with the upgrade. All testing was performed with the firmware that came with the install media. Initial tests were hampered by two issues. I had mistyped the WiFi password causing connection attempts to fail. Ethernet was unmanaged and remained configured even when physically disconnected. This masked WiFi even though WiFi appeared to be associated (wlan0 had an IP address handed out by the local DHCP server.) I got the Ethernet under NetworkManager control and retyped the password and achieved some success with WiFi. Ethernet seemed to work without difficulty with all kernels.","title":"Testing networking (WiFi, ETH) Pi 4B"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#status","text":"I'm not happy with results, will retest when I have a chance (not till the weekend.)","title":"Status"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#5150-2-arm64","text":"This is the kernel that comes with the install media ( 20220121_raspi_4_bookworm.img.xz ). Linux up 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux No WiFi. dmesg capture at https://paste.debian.net/1236231/ No wlan0 in ip addr output. Ethernet seems to work OK.","title":"5.15.0-2-arm64"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#5160-5-arm64","text":"This is the kernel available in the repo to upgrade following installation. Linux up 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux WiFi works w/out difficulty on both 5G and 2.4G APs. Switching repeatedly between the two SSIDs takes less than ten seconds.","title":"5.16.0-5-arm64"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#5170-rc8-arm64","text":"Available from experimental Linux up 5.17.0-rc8-arm64 #1 SMP Debian 5.17~rc8-1~exp1 (2022-03-14) aarch64 GNU/Linux WiFi works on 5G, does not associate on 2.4G. Captured output to daemon.log when trying to switch from an associated 5G AP to a 2.4G AP up until NM re-requested the WiFi password. https://paste.debian.net/1236229/ Connect times to the 5G AP was quick at times and not quick other times. At one point it was necessary to turn WiFi off and on again to get it to associate. (Both 5G and 2.4G radios are on the same WiFi AP.) Did not shutdown cleanly. Had to pull power.","title":"5.17.0-rc8-arm64"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#5170-trunk-arm64","text":"From experimental Linux up 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux Tested a second time and system hung. Hadn't remoted in - working from desktop. Happened once before and was unable to restart GDM and shutdown hung too. Was able to examine logs and dmesg output and saw nothing unusual but may not have been looking in the right place. Had to remove power both times. Both 5G and 2.4G WiFi seem to be working well. Switching back and forth between them seems timely.","title":"5.17.0-trunk-arm64"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#2022-04-03-repeating-testing","text":"","title":"2022-04-03 repeating testing"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#setup-recent-install-of-bookworm-install-media","text":"xzcat 20220121_raspi_4_bookworm.img.xz> /dev/sdf Install raspi-firmware from unstable (direct download) and network-manager and full upgrade of all bookworm packages. apt upgrade -y wget http://ftp.us.debian.org/debian/pool/non-free/r/raspi-firmware/raspi-firmware_1.20220328+ds-1_arm64.deb apt install ./raspi-firmware_1.20220328+ds-1_arm64.deb apt install network-manager","title":"Setup: Recent install of bookworm install media."},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#instructions-for-testingmanaging-wifi-using-cli","text":"HankB_, yes, from the command line, first, turn the wifi device on \"nmcli radio wifi on\" then list the wifi connections \"nmcli dev wifi list\", then sudo nmcli dev wifi connect network-ssid password \"network-password\" Test with 5.17.0-trunk-arm64 (ssh in via Ethernet) root@charm:~# nmcli radio wifi on root@charm:~# nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 97 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 97 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 77 *** WPA2 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 77 *** WPA2 root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" password \"elided\" Device 'wlan0' successfully activated with 'elided'. root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 5209sec preferred_lft 5209sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86390sec preferred_lft 14390sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 7194sec preferred_lft 7194sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 7197sec preferred_lft 4497sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86397sec preferred_lft 14397sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# root@charm:~# root@charm:~# root@charm:~# ifdown eth0 Killed old client process Internet Systems Consortium DHCP Client 4.4.2-P1 Copyright 2004-2021 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/eth0/dc:a6:32:bf:65:b5 Sending on LPF/eth0/dc:a6:32:bf:65:b5 Sending on Socket/fallback DHCPRELEASE of 192.168.1.103 on eth0 to 192.168.1.1 port 67 (This session was over Ethernet and resulted in a hung session following ifdown eth0 but I felt that was the easiest way to confirm that traffic was actually going over WiFi.) Reconnnect Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux Kernels available root@charm:~# ls -l /boot/vmlinuz* -rw-r--r-- 1 root root 28614528 Dec 18 23:20 /boot/vmlinuz-5.15.0-2-arm64 -rw-r--r-- 1 root root 29998976 Mar 15 06:54 /boot/vmlinuz-5.16.0-5-arm64 -rw-r--r-- 1 root root 30003072 Mar 29 07:16 /boot/vmlinuz-5.17.0-trunk-arm64 root@charm:~# Test with 5.15.0-2-arm64 (ssh in via Ethernet) root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7136sec preferred_lft 7136sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86394sec preferred_lft 14394sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever root@charm:~# nmcli radio wifi on root@charm:~# nmcli dev wifi list root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" password \"elided\" Error: No Wi-Fi device found. root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7098sec preferred_lft 7098sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86397sec preferred_lft 14397sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever root@charm:~# dmesg paste at https://paste.debian.net/1236660/","title":"Instructions for testing/managing WiFi using CLI"},{"location":"test-debug/Pi-4B-Bookworm-WiFi/#test-with-5160-5-arm64-starting-with-ssh-over-ethernet","text":"root@charm:~# uname -a Linux charm 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff inet 192.168.1.103/24 brd 192.168.1.255 scope global dynamic eth0 valid_lft 7155sec preferred_lft 7155sec inet6 2601:249:1680:36f0:dea6:32ff:febf:65b5/64 scope global dynamic mngtmpaddr valid_lft 86389sec preferred_lft 14389sec inet6 fe80::dea6:32ff:febf:65b5/64 scope link valid_lft forever preferred_lft forever 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 5692sec preferred_lft 5692sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 5696sec preferred_lft 2996sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86390sec preferred_lft 14390sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# ifdown eth0 Killed old client process Internet Systems Consortium DHCP Client 4.4.2-P1 Copyright 2004-2021 Internet Systems Consortium. All rights reserved. For info, please visit https://www.isc.org/software/dhcp/ Listening on LPF/eth0/dc:a6:32:bf:65:b5 Sending on LPF/eth0/dc:a6:32:bf:65:b5 Sending on Socket/fallback DHCPRELEASE of 192.168.1.103 on eth0 to 192.168.1.1 port 67 Start second session over WiFi hbarta@charm:~$ ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 5595sec preferred_lft 5595sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 5599sec preferred_lft 2899sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86399sec preferred_lft 14399sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever hbarta@charm:~$ Confirmation that WiFi is working on both 5G (\"Fanghorn Forest\") and 2.4G (Giant Voice System) via WiFi ssh session. hbarta@charm:~$ nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 100 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 84 **** WPA2 * 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 80 *** WPA2 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 75 *** WPA2 hbarta@charm:~$ su - root@charm:~# nmcli dev wifi connect \"Fanghorn Forest\" Device 'wlan0' successfully activated with '369ee301-096a-420b-99a9-68def48160f9'. root@charm:~# nmcli dev wifi list IN-USE BSSID SSID MODE CHAN RATE SIGNAL BARS SECURITY 70:4F:57:11:58:63 Nacho24 Infra 6 130 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E9 NRO-33 Infra 10 195 Mbit/s 100 **** WPA2 10:C3:7B:55:05:E8 Giant Voice System Infra 10 195 Mbit/s 94 **** WPA2 70:4F:57:11:58:62 Nacho5G Infra 149 270 Mbit/s 79 *** WPA2 * 10:C3:7B:55:05:EC Fanghorn Forest Infra 157 405 Mbit/s 66 *** WPA2 root@charm:~# ip addr 1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000 link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00 inet 127.0.0.1/8 scope host lo valid_lft forever preferred_lft forever inet6 ::1/128 scope host valid_lft forever preferred_lft forever 2: eth0: <BROADCAST,MULTICAST> mtu 1500 qdisc mq state DOWN group default qlen 1000 link/ether dc:a6:32:bf:65:b5 brd ff:ff:ff:ff:ff:ff 3: wlan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000 link/ether dc:a6:32:bf:65:b6 brd ff:ff:ff:ff:ff:ff inet 192.168.1.164/24 brd 192.168.1.255 scope global dynamic noprefixroute wlan0 valid_lft 6825sec preferred_lft 6825sec inet6 2601:249:1680:36f0::1a72/128 scope global dynamic noprefixroute valid_lft 6827sec preferred_lft 4127sec inet6 2601:249:1680:36f0:dd52:e503:3685:cb27/64 scope global dynamic noprefixroute valid_lft 86401sec preferred_lft 14401sec inet6 fe80::add9:ac99:37f5:fddb/64 scope link noprefixroute valid_lft forever preferred_lft forever root@charm:~# uname -a Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux root@charm:~#","title":"test with 5.16.0-5-arm64 starting with SSH over Ethernet"},{"location":"test-debug/Pi-4B-Bookworm-testing/","text":"Pi 4B Bookworm testing Determine if some previous bugs have been fixed in more recent kernels. Bugs fell into two areas: vc4 module - this included a use-after-free as well as other issues reported in dmesg . SD card timeout - Timeout message repeated every 10s. This had manifested previously and a workaround was to insert an SD card into the slot and the messages stopped. This time that does not work. Further characteristics of the present situation: doesn't boot Boots from attached USB SSD skipping the SD card. No /dev/mmc* after boot accompanied by no WiFi. /dev/mmc* entries, can mount and read card and after several more timeout messages, they stop. When the timeout messages are being reported, the system cannot complete shutdown to reboot. It is necessary to remove power from the system. Normal boot, no mmc timeouts and apparently normal operation. In other words, there is a great variety of behavior with kernels with Bookworm. The good news is that later kernels do not exhibit the problems with the vc4 module so the focus on these notes is to better characterize the SD timeout issue now reported at https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1019700 . Procedure Start with a fresh install of 20220808_raspi_4_bookworm.img.xz On an SD card. Boot, configure a user to facilitate access via SSH. Examine dmesg output to determine SD timeouts /dev/mmc* emtries indication of WiFi functionality (via ip addr ) Reboot mutiple times to determine pf the SD timeout problem exists. Update/upgrade to get new kernel and repeat checks above including multiple reboots. find and install other kernels and repeat checks/reboots. Results Bullseye Linux cm4pi 5.15.61-v8+ #1579 SMP PREEMPT Fri Aug 26 11:16:44 BST 2022 aarch64 GNU/Linux No SD timeouts (booted from SD) WiFi working /dev/mmc* entries present Bookworm Installed kernel Linux muon 5.18.0-3-arm64 #1 SMP Debian 5.18.14-1 (2022-07-23) aarch64 GNU/Linux Came up on first install w/out difficulty. Rebooted and power cycled, 3 times each. No SD problem. update/upgrade and reboot. Linux muon 5.19.0-1-arm64 #1 SMP Debian 5.19.6-1 (2022-09-01) aarch64 GNU/Linux On first boot mmc timeout messages are appearing. Delaying completoin of boot. Remounting SD card. Cannot remote in. After waiting a couple minutes, tried C-A-D and no response. power cycled. Second boot OK.","title":"Pi 4B Bookworm testing"},{"location":"test-debug/Pi-4B-Bookworm-testing/#pi-4b-bookworm-testing","text":"Determine if some previous bugs have been fixed in more recent kernels. Bugs fell into two areas: vc4 module - this included a use-after-free as well as other issues reported in dmesg . SD card timeout - Timeout message repeated every 10s. This had manifested previously and a workaround was to insert an SD card into the slot and the messages stopped. This time that does not work. Further characteristics of the present situation: doesn't boot Boots from attached USB SSD skipping the SD card. No /dev/mmc* after boot accompanied by no WiFi. /dev/mmc* entries, can mount and read card and after several more timeout messages, they stop. When the timeout messages are being reported, the system cannot complete shutdown to reboot. It is necessary to remove power from the system. Normal boot, no mmc timeouts and apparently normal operation. In other words, there is a great variety of behavior with kernels with Bookworm. The good news is that later kernels do not exhibit the problems with the vc4 module so the focus on these notes is to better characterize the SD timeout issue now reported at https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1019700 .","title":"Pi 4B Bookworm testing"},{"location":"test-debug/Pi-4B-Bookworm-testing/#procedure","text":"Start with a fresh install of 20220808_raspi_4_bookworm.img.xz On an SD card. Boot, configure a user to facilitate access via SSH. Examine dmesg output to determine SD timeouts /dev/mmc* emtries indication of WiFi functionality (via ip addr ) Reboot mutiple times to determine pf the SD timeout problem exists. Update/upgrade to get new kernel and repeat checks above including multiple reboots. find and install other kernels and repeat checks/reboots.","title":"Procedure"},{"location":"test-debug/Pi-4B-Bookworm-testing/#results","text":"","title":"Results"},{"location":"test-debug/Pi-4B-Bookworm-testing/#bullseye","text":"Linux cm4pi 5.15.61-v8+ #1579 SMP PREEMPT Fri Aug 26 11:16:44 BST 2022 aarch64 GNU/Linux No SD timeouts (booted from SD) WiFi working /dev/mmc* entries present","title":"Bullseye"},{"location":"test-debug/Pi-4B-Bookworm-testing/#bookworm","text":"Installed kernel Linux muon 5.18.0-3-arm64 #1 SMP Debian 5.18.14-1 (2022-07-23) aarch64 GNU/Linux Came up on first install w/out difficulty. Rebooted and power cycled, 3 times each. No SD problem. update/upgrade and reboot. Linux muon 5.19.0-1-arm64 #1 SMP Debian 5.19.6-1 (2022-09-01) aarch64 GNU/Linux On first boot mmc timeout messages are appearing. Delaying completoin of boot. Remounting SD card. Cannot remote in. After waiting a couple minutes, tried C-A-D and no response. power cycled. Second boot OK.","title":"Bookworm"},{"location":"test-debug/Pi-4B-firmware/","text":"Firmware issue raspi-firmware Debian Bookworm https://github.com/raspberrypi/firmware/issues/1705 Forwarded to Debian - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1007719 2022-04-03 test tagged release Previous testing established that the latest firmware pulled from master did not exhibit this problem. That is now pulled into a tagged release 1.2022-328 https://github.com/raspberrypi/firmware/archive/refs/tags/1.20220328.tar.gz I have a Pi 4B/8GH with Bookworm (with task-gnome-desktop ) installed and with the following kernels: hbarta@up:~$ ls -l /boot/vmlinuz* -rw-r--r-- 1 root root 28614528 Dec 18 23:20 /boot/vmlinuz-5.15.0-2-arm64 -rw-r--r-- 1 root root 29998976 Mar 15 06:54 /boot/vmlinuz-5.16.0-5-arm64 -rw-r--r-- 1 root root 30001664 Mar 14 06:04 /boot/vmlinuz-5.17.0-rc8-arm64 -rw-r--r-- 1 root root 30003072 Mar 29 07:16 /boot/vmlinuz-5.17.0-trunk-arm64 hbarta@up:~$ Testing will be performed with the tagged firmware on all kernels. The following command will be used to determine if the issue exists. cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies vcdbg downloaded from https://drive.google.com/file/d/1HS9E5vnxxNqrizB4mEYrnFoQQ1axSRKm/view?usp=sharing is used to confirm firmware version. Procedure Download and extract the frmware tarball. cd firmware-1.20220328/boot cp bootcode.bin *.dat *.elf /boot/firmware Edit /boot/firmware/config.txt to select trhe desired kernel Reboot and check results. Firmware prior to starting test/ root@up:~# vcdbg version vcos_build_version = 40787ee5905644f639a2a0f6e00ae12e517a2211 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Aug 3 2021 vcos_build_time = 18:14:56 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@up:~# Testing Attempts to use the older kernels (5.15.6, 5.16.0) were unsuccessful because the installation of one of the more recent kernels apparently purged those. Instead the existing 5.17.0-trunk-arm64 kernel will be tested with the tagged tarball and then testing will be performed with a fresh install and the raspi-firmware in the Bookworm repo. root@up:~# uname -a Linux up 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux root@up:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 root@up:~# vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@up:~# Fresh install xzcat 20220121_raspi_4_bookworm.img.xz> /dev/sdf boot adduser hbarta hostnamectl set-hostname charm apt update reboot, copy vcdbg root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 root@charm:~# ./vcdbg version vcos_build_version = 40787ee5905644f639a2a0f6e00ae12e517a2211 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Aug 3 2021 vcos_build_time = 18:14:56 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Upgrade raspi-firmware only. root@charm:~# apt install raspi-firmware Reading package lists... Done Building dependency tree... Done Reading state information... Done The following packages will be upgraded: raspi-firmware 1 upgraded, 0 newly installed, 0 to remove and 110 not upgraded. Need to get 4548 kB of archives. After this operation, 31.7 kB of additional disk space will be used. Get:1 http://deb.debian.org/debian bookworm/non-free arm64 raspi-firmware arm64 1.20220120+ds-1 [4548 kB] Fetched 4548 kB in 2s (2976 kB/s) (Reading database ... 18717 files and directories currently installed.) Preparing to unpack .../raspi-firmware_1.20220120+ds-1_arm64.deb ... Unpacking raspi-firmware (1.20220120+ds-1) over (1.20210805+ds-1) ... Setting up raspi-firmware (1.20220120+ds-1) ... Configuration file '/etc/default/raspi-firmware' ==> Modified (by you or by a script) since installation. ==> Package distributor has shipped an updated version. What would you like to do about it ? Your options are: Y or I : install the package maintainer's version N or O : keep your currently-installed version D : show the differences between the versions Z : start a shell to examine the situation The default action is to keep your current version. *** raspi-firmware (Y/I/N/O/D/Z) [default=N] ? D --- /etc/default/raspi-firmware 2022-01-21 08:41:33.325239447 +0000 +++ /etc/default/raspi-firmware.dpkg-new 2022-02-11 05:33:01.000000000 +0000 @@ -25,7 +25,7 @@ # but you can specify otherwise, including booting by partition label # (i.e. ROOTPART=\"LABEL=root\") # -ROOTPART=LABEL=RASPIROOT +#ROOTPART=/dev/mmcblk0p2 # Main baremetal application that is started by the firmware once the # hardware has been initialized. Usually, this is the Linux kernel but @@ -73,7 +73,7 @@ # which drives the serial ports) gets its clock from the GPU, as # explained here: # -# https://www.raspberrypi.org/documentation/configuration/uart.md +# https://www.raspberrypi.com/documentation/computers/configuration.html#mini-uart-and-cpu-core-frequency # # The clock speeds the RPi4 GPU uses are 360/500/550 MHz. If you # intend to use the serial console, you need to set GPU_FREQ to @@ -98,7 +98,7 @@ # Create a file \"/etc/default/raspi-firmware-custom\" to add custom parameter # to startup the kernel. Maybe not all options are supported. -# (see https://www.raspberrypi.org/documentation/configuration/config-txt/) +# (see https://www.raspberrypi.com/documentation/computers/config_txt.html) # # To pass extra arbitrary parameters to the kernel at boot, you can specify # them in \"/etc/default/raspi-extra-cmdline\". Keep in mind they should be Configuration file '/etc/default/raspi-firmware' ==> Modified (by you or by a script) since installation. ==> Package distributor has shipped an updated version. What would you like to do about it ? Your options are: Y or I : install the package maintainer's version N or O : keep your currently-installed version D : show the differences between the versions Z : start a shell to examine the situation The default action is to keep your current version. *** raspi-firmware (Y/I/N/O/D/Z) [default=N] ? Y Installing new version of config file /etc/default/raspi-firmware ... Installing new version of config file /etc/kernel/postinst.d/z50-raspi-firmware ... Processing triggers for initramfs-tools (0.140) ... update-initramfs: Generating /boot/initrd.img-5.15.0-2-arm64 root@charm:~# Reboot root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies cat: /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies: No such file or directory root@charm:~# dpkg -l | grep raspi-firmware ii raspi-firmware 1.20220120+ds-1 arm64 Raspberry Pi family GPU firmware and bootloaders root@charm:~# ./vcdbg version vcos_build_version = bd88f66f8952d34e4e0613a85c7a6d3da49e13e2 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Jan 20 2022 vcos_build_time = 13:56:48 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Wrong package. wget http://ftp.us.debian.org/debian/pool/non-free/r/raspi-firmware/raspi-firmware_1.20220328+ds-1_arm64.deb root@charm:~# apt install ./raspi-firmware_1.20220328+ds-1_arm64.deb Reading package lists... Done Building dependency tree... Done Reading state information... Done Note, selecting 'raspi-firmware' instead of './raspi-firmware_1.20220328+ds-1_arm64.deb' The following packages will be upgraded: raspi-firmware 1 upgraded, 0 newly installed, 0 to remove and 110 not upgraded. Need to get 0 B/4551 kB of archives. After this operation, 8192 B of additional disk space will be used. Get:1 /root/raspi-firmware_1.20220328+ds-1_arm64.deb raspi-firmware arm64 1.20220328+ds-1 [4551 kB] (Reading database ... 18717 files and directories currently installed.) Preparing to unpack .../raspi-firmware_1.20220328+ds-1_arm64.deb ... Unpacking raspi-firmware (1.20220328+ds-1) over (1.20220120+ds-1) ... Setting up raspi-firmware (1.20220328+ds-1) ... Processing triggers for initramfs-tools (0.140) ... update-initramfs: Generating /boot/initrd.img-5.15.0-2-arm64 N: Download is performed unsandboxed as root as file '/root/raspi-firmware_1.20220328+ds-1_arm64.deb' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied) root@charm:~# reboot hbarta@charm:~$ uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Perform full upgrade and reboot 110 upgraded, 3 newly installed, 0 to remove and 0 not upgraded. hbarta@charm:~$ uname -a Linux charm 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Install with kernel from experimental root@charm:~# cat /etc/apt/preferences.d/linux-kernel Package: * Pin: release o=Debian,a=experimental Pin-Priority: 102 root@up:~# apt policy Package files: 100 /var/lib/dpkg/status release a=now 500 http://deb.debian.org/debian bookworm/non-free arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=non-free,b=arm64 origin deb.debian.org 500 http://deb.debian.org/debian bookworm/contrib arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=contrib,b=arm64 origin deb.debian.org 500 http://deb.debian.org/debian bookworm/main arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=main,b=arm64 origin deb.debian.org Pinned packages: root@charm:~# root@charm:~# root@charm:~# echo \"deb http://deb.debian.org/debian experimental main\" >> /etc/apt/sources.list root@charm:~# apt update Hit:1 http://deb.debian.org/debian bookworm InRelease Hit:2 http://security.debian.org/debian-security bookworm-security InRelease Get:3 http://deb.debian.org/debian experimental InRelease [75.4 kB] Get:4 http://deb.debian.org/debian experimental/main arm64 Packages [369 kB] Get:5 http://deb.debian.org/debian experimental/main Translation-en [232 kB] Fetched 677 kB in 3s (250 kB/s) Reading package lists... Done Building dependency tree... Done Reading state information... Done All packages are up to date. root@charm:~# apt install -t experimental linux-image-5.17.0-trunk-arm64 Reading package lists... Done Building dependency tree... Done Reading state information... Done Suggested packages: linux-doc-5.17 debian-kernel-handbook The following NEW packages will be installed: linux-image-5.17.0-trunk-arm64 0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded. Need to get 58.6 MB of archives. After this operation, 406 MB of additional disk space will be used. Get:1 http://deb.debian.org/debian experimental/main arm64 linux-image-5.17.0-trunk-arm64 arm64 5.17.1-1~exp1 [58.6 MB] Fetched 58.6 MB in 4s (13.8 MB/s) Selecting previously unselected package linux-image-5.17.0-trunk-arm64. (Reading database ... 23590 files and directories currently installed.) Preparing to unpack .../linux-image-5.17.0-trunk-arm64_5.17.1-1~exp1_arm64.deb ... Unpacking linux-image-5.17.0-trunk-arm64 (5.17.1-1~exp1) ... Setting up linux-image-5.17.0-trunk-arm64 (5.17.1-1~exp1) ... I: /vmlinuz.old is now a symlink to boot/vmlinuz-5.16.0-5-arm64 I: /initrd.img.old is now a symlink to boot/initrd.img-5.16.0-5-arm64 I: /vmlinuz is now a symlink to boot/vmlinuz-5.17.0-trunk-arm64 I: /initrd.img is now a symlink to boot/initrd.img-5.17.0-trunk-arm64 /etc/kernel/postinst.d/initramfs-tools: update-initramfs: Generating /boot/initrd.img-5.17.0-trunk-arm64 root@charm:~# Note: Results of following apt policy command were inadvertently copied into /etc/apt/preferences.d/linux-kernel but seem to be ignored by apt or at least did not prevent the desired operation. Reboot hbarta@charm:~$ uname -a Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~#","title":"Firmware issue raspi-firmware Debian Bookworm"},{"location":"test-debug/Pi-4B-firmware/#firmware-issue-raspi-firmware-debian-bookworm","text":"https://github.com/raspberrypi/firmware/issues/1705 Forwarded to Debian - https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=1007719","title":"Firmware issue raspi-firmware Debian Bookworm"},{"location":"test-debug/Pi-4B-firmware/#2022-04-03-test-tagged-release","text":"Previous testing established that the latest firmware pulled from master did not exhibit this problem. That is now pulled into a tagged release 1.2022-328 https://github.com/raspberrypi/firmware/archive/refs/tags/1.20220328.tar.gz I have a Pi 4B/8GH with Bookworm (with task-gnome-desktop ) installed and with the following kernels: hbarta@up:~$ ls -l /boot/vmlinuz* -rw-r--r-- 1 root root 28614528 Dec 18 23:20 /boot/vmlinuz-5.15.0-2-arm64 -rw-r--r-- 1 root root 29998976 Mar 15 06:54 /boot/vmlinuz-5.16.0-5-arm64 -rw-r--r-- 1 root root 30001664 Mar 14 06:04 /boot/vmlinuz-5.17.0-rc8-arm64 -rw-r--r-- 1 root root 30003072 Mar 29 07:16 /boot/vmlinuz-5.17.0-trunk-arm64 hbarta@up:~$ Testing will be performed with the tagged firmware on all kernels. The following command will be used to determine if the issue exists. cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies vcdbg downloaded from https://drive.google.com/file/d/1HS9E5vnxxNqrizB4mEYrnFoQQ1axSRKm/view?usp=sharing is used to confirm firmware version. Procedure Download and extract the frmware tarball. cd firmware-1.20220328/boot cp bootcode.bin *.dat *.elf /boot/firmware Edit /boot/firmware/config.txt to select trhe desired kernel Reboot and check results. Firmware prior to starting test/ root@up:~# vcdbg version vcos_build_version = 40787ee5905644f639a2a0f6e00ae12e517a2211 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Aug 3 2021 vcos_build_time = 18:14:56 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@up:~#","title":"2022-04-03 test tagged release"},{"location":"test-debug/Pi-4B-firmware/#testing","text":"Attempts to use the older kernels (5.15.6, 5.16.0) were unsuccessful because the installation of one of the more recent kernels apparently purged those. Instead the existing 5.17.0-trunk-arm64 kernel will be tested with the tagged tarball and then testing will be performed with a fresh install and the raspi-firmware in the Bookworm repo. root@up:~# uname -a Linux up 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux root@up:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 root@up:~# vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@up:~#","title":"Testing"},{"location":"test-debug/Pi-4B-firmware/#fresh-install","text":"xzcat 20220121_raspi_4_bookworm.img.xz> /dev/sdf boot adduser hbarta hostnamectl set-hostname charm apt update reboot, copy vcdbg root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 root@charm:~# ./vcdbg version vcos_build_version = 40787ee5905644f639a2a0f6e00ae12e517a2211 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Aug 3 2021 vcos_build_time = 18:14:56 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Upgrade raspi-firmware only. root@charm:~# apt install raspi-firmware Reading package lists... Done Building dependency tree... Done Reading state information... Done The following packages will be upgraded: raspi-firmware 1 upgraded, 0 newly installed, 0 to remove and 110 not upgraded. Need to get 4548 kB of archives. After this operation, 31.7 kB of additional disk space will be used. Get:1 http://deb.debian.org/debian bookworm/non-free arm64 raspi-firmware arm64 1.20220120+ds-1 [4548 kB] Fetched 4548 kB in 2s (2976 kB/s) (Reading database ... 18717 files and directories currently installed.) Preparing to unpack .../raspi-firmware_1.20220120+ds-1_arm64.deb ... Unpacking raspi-firmware (1.20220120+ds-1) over (1.20210805+ds-1) ... Setting up raspi-firmware (1.20220120+ds-1) ... Configuration file '/etc/default/raspi-firmware' ==> Modified (by you or by a script) since installation. ==> Package distributor has shipped an updated version. What would you like to do about it ? Your options are: Y or I : install the package maintainer's version N or O : keep your currently-installed version D : show the differences between the versions Z : start a shell to examine the situation The default action is to keep your current version. *** raspi-firmware (Y/I/N/O/D/Z) [default=N] ? D --- /etc/default/raspi-firmware 2022-01-21 08:41:33.325239447 +0000 +++ /etc/default/raspi-firmware.dpkg-new 2022-02-11 05:33:01.000000000 +0000 @@ -25,7 +25,7 @@ # but you can specify otherwise, including booting by partition label # (i.e. ROOTPART=\"LABEL=root\") # -ROOTPART=LABEL=RASPIROOT +#ROOTPART=/dev/mmcblk0p2 # Main baremetal application that is started by the firmware once the # hardware has been initialized. Usually, this is the Linux kernel but @@ -73,7 +73,7 @@ # which drives the serial ports) gets its clock from the GPU, as # explained here: # -# https://www.raspberrypi.org/documentation/configuration/uart.md +# https://www.raspberrypi.com/documentation/computers/configuration.html#mini-uart-and-cpu-core-frequency # # The clock speeds the RPi4 GPU uses are 360/500/550 MHz. If you # intend to use the serial console, you need to set GPU_FREQ to @@ -98,7 +98,7 @@ # Create a file \"/etc/default/raspi-firmware-custom\" to add custom parameter # to startup the kernel. Maybe not all options are supported. -# (see https://www.raspberrypi.org/documentation/configuration/config-txt/) +# (see https://www.raspberrypi.com/documentation/computers/config_txt.html) # # To pass extra arbitrary parameters to the kernel at boot, you can specify # them in \"/etc/default/raspi-extra-cmdline\". Keep in mind they should be Configuration file '/etc/default/raspi-firmware' ==> Modified (by you or by a script) since installation. ==> Package distributor has shipped an updated version. What would you like to do about it ? Your options are: Y or I : install the package maintainer's version N or O : keep your currently-installed version D : show the differences between the versions Z : start a shell to examine the situation The default action is to keep your current version. *** raspi-firmware (Y/I/N/O/D/Z) [default=N] ? Y Installing new version of config file /etc/default/raspi-firmware ... Installing new version of config file /etc/kernel/postinst.d/z50-raspi-firmware ... Processing triggers for initramfs-tools (0.140) ... update-initramfs: Generating /boot/initrd.img-5.15.0-2-arm64 root@charm:~# Reboot root@charm:~# uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux root@charm:~# cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies cat: /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies: No such file or directory root@charm:~# dpkg -l | grep raspi-firmware ii raspi-firmware 1.20220120+ds-1 arm64 Raspberry Pi family GPU firmware and bootloaders root@charm:~# ./vcdbg version vcos_build_version = bd88f66f8952d34e4e0613a85c7a6d3da49e13e2 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Jan 20 2022 vcos_build_time = 13:56:48 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Wrong package. wget http://ftp.us.debian.org/debian/pool/non-free/r/raspi-firmware/raspi-firmware_1.20220328+ds-1_arm64.deb root@charm:~# apt install ./raspi-firmware_1.20220328+ds-1_arm64.deb Reading package lists... Done Building dependency tree... Done Reading state information... Done Note, selecting 'raspi-firmware' instead of './raspi-firmware_1.20220328+ds-1_arm64.deb' The following packages will be upgraded: raspi-firmware 1 upgraded, 0 newly installed, 0 to remove and 110 not upgraded. Need to get 0 B/4551 kB of archives. After this operation, 8192 B of additional disk space will be used. Get:1 /root/raspi-firmware_1.20220328+ds-1_arm64.deb raspi-firmware arm64 1.20220328+ds-1 [4551 kB] (Reading database ... 18717 files and directories currently installed.) Preparing to unpack .../raspi-firmware_1.20220328+ds-1_arm64.deb ... Unpacking raspi-firmware (1.20220328+ds-1) over (1.20220120+ds-1) ... Setting up raspi-firmware (1.20220328+ds-1) ... Processing triggers for initramfs-tools (0.140) ... update-initramfs: Generating /boot/initrd.img-5.15.0-2-arm64 N: Download is performed unsandboxed as root as file '/root/raspi-firmware_1.20220328+ds-1_arm64.deb' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied) root@charm:~# reboot hbarta@charm:~$ uname -a Linux charm 5.15.0-2-arm64 #1 SMP Debian 5.15.5-2 (2021-12-18) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Perform full upgrade and reboot 110 upgraded, 3 newly installed, 0 to remove and 0 not upgraded. hbarta@charm:~$ uname -a Linux charm 5.16.0-5-arm64 #1 SMP Debian 5.16.14-1 (2022-03-15) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~# Install with kernel from experimental root@charm:~# cat /etc/apt/preferences.d/linux-kernel Package: * Pin: release o=Debian,a=experimental Pin-Priority: 102 root@up:~# apt policy Package files: 100 /var/lib/dpkg/status release a=now 500 http://deb.debian.org/debian bookworm/non-free arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=non-free,b=arm64 origin deb.debian.org 500 http://deb.debian.org/debian bookworm/contrib arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=contrib,b=arm64 origin deb.debian.org 500 http://deb.debian.org/debian bookworm/main arm64 Packages release o=Debian,a=testing,n=bookworm,l=Debian,c=main,b=arm64 origin deb.debian.org Pinned packages: root@charm:~# root@charm:~# root@charm:~# echo \"deb http://deb.debian.org/debian experimental main\" >> /etc/apt/sources.list root@charm:~# apt update Hit:1 http://deb.debian.org/debian bookworm InRelease Hit:2 http://security.debian.org/debian-security bookworm-security InRelease Get:3 http://deb.debian.org/debian experimental InRelease [75.4 kB] Get:4 http://deb.debian.org/debian experimental/main arm64 Packages [369 kB] Get:5 http://deb.debian.org/debian experimental/main Translation-en [232 kB] Fetched 677 kB in 3s (250 kB/s) Reading package lists... Done Building dependency tree... Done Reading state information... Done All packages are up to date. root@charm:~# apt install -t experimental linux-image-5.17.0-trunk-arm64 Reading package lists... Done Building dependency tree... Done Reading state information... Done Suggested packages: linux-doc-5.17 debian-kernel-handbook The following NEW packages will be installed: linux-image-5.17.0-trunk-arm64 0 upgraded, 1 newly installed, 0 to remove and 16 not upgraded. Need to get 58.6 MB of archives. After this operation, 406 MB of additional disk space will be used. Get:1 http://deb.debian.org/debian experimental/main arm64 linux-image-5.17.0-trunk-arm64 arm64 5.17.1-1~exp1 [58.6 MB] Fetched 58.6 MB in 4s (13.8 MB/s) Selecting previously unselected package linux-image-5.17.0-trunk-arm64. (Reading database ... 23590 files and directories currently installed.) Preparing to unpack .../linux-image-5.17.0-trunk-arm64_5.17.1-1~exp1_arm64.deb ... Unpacking linux-image-5.17.0-trunk-arm64 (5.17.1-1~exp1) ... Setting up linux-image-5.17.0-trunk-arm64 (5.17.1-1~exp1) ... I: /vmlinuz.old is now a symlink to boot/vmlinuz-5.16.0-5-arm64 I: /initrd.img.old is now a symlink to boot/initrd.img-5.16.0-5-arm64 I: /vmlinuz is now a symlink to boot/vmlinuz-5.17.0-trunk-arm64 I: /initrd.img is now a symlink to boot/initrd.img-5.17.0-trunk-arm64 /etc/kernel/postinst.d/initramfs-tools: update-initramfs: Generating /boot/initrd.img-5.17.0-trunk-arm64 root@charm:~# Note: Results of following apt policy command were inadvertently copied into /etc/apt/preferences.d/linux-kernel but seem to be ignored by apt or at least did not prevent the desired operation. Reboot hbarta@charm:~$ uname -a Linux charm 5.17.0-trunk-arm64 #1 SMP Debian 5.17.1-1~exp1 (2022-03-29) aarch64 GNU/Linux hbarta@charm:~$ cat /sys/devices/system/cpu/cpufreq/policy0/scaling_available_frequencies 600000 700000 800000 900000 1000000 1100000 1200000 1300000 1400000 1500000 hbarta@charm:~$ su - root@charm:~# ./vcdbg version vcos_build_version = e5a963efa66a1974127860b42e913d2374139ff5 (clean) vcos_build_branch = bcm2711_2 debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_application' vcos_build_application = ? vcos_build_date = Mar 24 2022 vcos_build_time = 13:19:26 vcos_build_user = dom vcos_build_hostname = buildbot vcos_build_platform = raspberrypi_linux debug_sym: ReadVideoCoreMemoryBySymbol: Symbol not found: 'vcos_build_type' vcos_build_type = ? root@charm:~#","title":"Fresh install"}]}